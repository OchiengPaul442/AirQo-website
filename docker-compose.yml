######## For development purposes only.#######
# `docker-compose` is a tool for defining and running multi-container Docker applications.
# Ensure to install Docker and Docker Compose before running this file.
# This file is used to define the services and their configurations for the AirQo-website project.
# It is used by the docker-compose command to start and manage the containers.

# To build the containers, run the following command in the terminal:
#   docker-compose build
#
# To start the containers, run the following command in the terminal:
#   docker-compose up -d
#
# To stop the containers, run the following command in the terminal:
#   docker-compose down
#
# To view the logs of a container, run the following command in the terminal:
#   docker-compose logs <service-name>
#
# To view the logs of all containers, run the following command in the terminal:
#   docker-compose logs --follow
#
# To view the status of the containers, run the following command in the terminal:
#   docker-compose ps

version: "3.3"

services:
  backend:
    build:
      context: ./backend
    container_name: django-backend
    env_file:
      - ./backend/.env
    command: ["gunicorn", "--bind", "0.0.0.0:8000", "backend.wsgi:application"]
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    depends_on:
      - db
    networks:
      - backend-network

  frontend:
    build:
      context: ./frontend
    container_name: nextjs-frontend
    env_file:
      - ./frontend/.env
    volumes:
      - ./frontend:/app
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - frontend-network
      - backend-network

  # This service is used to run the database if you have local development setup db.
  # db:
  #   image: postgres:13
  #   container_name: postgres-db
  #   env_file:
  #     - ./backend/.env
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   ports:
  #     - "2023:2023"
  #   networks:
  #     - backend-network
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -p 2023"]
  #     interval: 10s
  #     retries: 5
  #     start_period: 30s

volumes:
  postgres_data:

networks:
  backend-network:
    driver: bridge
  frontend-network:
    driver: bridge
